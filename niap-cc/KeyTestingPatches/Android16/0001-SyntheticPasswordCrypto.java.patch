--- SyntheticPasswordCrypto.java	2023-10-02 05:35:22.189541116 +0000
+++ SyntheticPasswordCrypto.java.patched	2023-09-29 02:57:08.030762456 +0000
@@ -23,11 +23,13 @@ import android.security.keystore2.Androi
 import android.system.keystore2.Domain;
 import android.system.keystore2.KeyDescriptor;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.Slog;
 
 import com.android.internal.util.ArrayUtils;
 
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.KeyStore;
@@ -253,6 +255,8 @@ class SyntheticPasswordCrypto {
 
     protected static byte[] personalizedHash(byte[] personalization, byte[]... message) {
         try {
+            StringBuilder logMessage = new StringBuilder();
+            logMessage.append("DO NOT SUBMIT personalizedHash");
             final int PADDING_LENGTH = 128;
             MessageDigest digest = MessageDigest.getInstance("SHA-512");
             if (personalization.length > PADDING_LENGTH) {
@@ -260,16 +264,55 @@ class SyntheticPasswordCrypto {
             }
             // Personalize the hash
             // Pad it to the block size of the hash function
+            logMessage.append(" personalization: ");
+            logMessage.append(new String(personalization, "UTF-8"));
             personalization = Arrays.copyOf(personalization, PADDING_LENGTH);
             digest.update(personalization);
+            logMessage.append(" message: [");
             for (byte[] data : message) {
+                logMessage.append(" ");
+                logMessage.append(bytesToHex(data));
                 digest.update(data);
             }
-            return digest.digest();
+            logMessage.append(" ]");
+            byte[] res = digest.digest();
+            logMessage.append(" digest: ");
+            logMessage.append(bytesToHex(res));
+            Log.e(TAG, logMessage.toString());
+            return res;
         } catch (NoSuchAlgorithmException e) {
             throw new IllegalStateException("NoSuchAlgorithmException for SHA-512", e);
+        } catch (UnsupportedEncodingException e) {
+            throw new IllegalStateException("Unable to represent bytes as UTF-8", e);
         }
     }
+   /**
+    * Uppercase hex string for byte array
+    */
+   public static String bytesToHex(byte[] bytes) {
+       try {
+           return new String(bytesToHexBytes(bytes), "UTF-8");
+       } catch (UnsupportedEncodingException e) {
+           throw new RuntimeException(e);
+       }
+   }
+
+   protected static final byte[] HEX_ARRAY = "0123456789ABCDEF".getBytes();
+   /**
+    * Converts bytes to hex.
+    */
+   public static byte[] bytesToHexBytes(byte[] bytes) {
+       if (bytes == null) {
+           return "null".getBytes();
+       }
+       byte[] hexBytes = new byte[bytes.length * 2];
+       for (int j = 0; j < bytes.length; j++) {
+           int v = bytes[j] & 0xFF;
+           hexBytes[j * 2] = HEX_ARRAY[v >>> 4];
+           hexBytes[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
+        }
+       return hexBytes;
+    }
 
     static boolean migrateLockSettingsKey(String alias) {
         final KeyDescriptor legacyKey = new KeyDescriptor();
